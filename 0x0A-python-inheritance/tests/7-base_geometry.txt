# FILE: tests/7-base_geometry.txt

# MODULE: 7-base_geometry.py
# DESCRIPTION: This module contains the BaseGeometry class with area() and integer_validator() methods.

# CLASS: BaseGeometry
# DESCRIPTION:
#   - Represents a class: BaseGeometry.
#   - Contains methods area() and integer_validator().

# USAGE:
#   - >>> BG = __import__("7-base_geometry").BaseGeometry

# Test Cases:
>>> BG = __import__("7-base_geometry").BaseGeometry

# Checking for area failure:
>>> obj = BG()
>>> obj.area()
Traceback (most recent call last):
  ...
Exception: area() is not implemented

# Checking integer validator for passing integer:
>>> obj = BG()
>>> obj.integer_validator("valid_integer", 1)

# Checking for integer < 0;
>>> obj = BG()
>>> obj.integer_validator("negative_integer", -4)
Traceback (most recent call last):
  ...
ValueError: negative_integer must be greater than 0

# Checking for non-integer types:
>>> obj = BG()
>>> obj.integer_validator("bool_value", True)
Traceback (most recent call last):
  ...
TypeError: bool_value must be an integer

>>> obj = BG()
>>> obj.integer_validator("float_value", 1.5)
Traceback (most recent call last):
  ...
TypeError: float_value must be an integer

>>> obj = BG()
>>> obj.integer_validator("string_value", "hello")
Traceback (most recent call last):
  ...
TypeError: string_value must be an integer

# Checking for no arguments to integer_validator:
>>> obj = BG()
>>> obj.integer_validator()
Traceback (most recent call last):
  ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

# Checking for only 1 argument to integer_validator:
>>> obj = BG()
>>> obj.integer_validator("single_arg")
Traceback (most recent call last):
  ...
TypeError: integer_validator() missing 1 required positional argument: 'value'

