# FILE: tests/7-base_geometry.txt

# MODULE: 7-base_geometry.py
# DESCRIPTION: This module contains the BaseGeometry class with area() and integer_validator() methods.

# CLASS: BaseGeometry
# DESCRIPTION:
#   - Represents a class: BaseGeometry.
#   - Contains methods area() and integer_validator().

# USAGE:
#   - >>> BG = __import__("7-base_geometry").BaseGeometry

# Test Cases:
>>> BG = __import__("7-base_geometry").BaseGeometry

# Checking for area failure:
>>> obj = BG()
>>> obj.area()
Traceback (most recent call last):
  ...
Exception: area() is not implemented

# Checking too many arguments for area:
>>> obj = BG()
>>> obj.area(1)
Traceback (most recent call last):
  ...
TypeError: area() takes 1 positional argument but 2 were given

# Checking integer validator for passing integer:
>>> obj = BG()
>>> obj.integer_validator("valid_integer", 1)

# Checking for integer == 0:
>>> obj = BG()
>>> obj.integer_validator("zero_integer", 0)
Traceback (most recent call last):
  ...
ValueError: zero_integer must be greater than 0

# Checking for integer < 0;
>>> obj = BG()
>>> obj.integer_validator("negative_integer", -5)
Traceback (most recent call last):
  ...
ValueError: negative_integer must be greater than 0

# Checking for non-integer types:
>>> obj = BG()
>>> obj.integer_validator("bool_value", True)
Traceback (most recent call last):
  ...
TypeError: bool_value must be an integer

>>> obj = BG()
>>> obj.integer_validator("float_value", 1.5)
Traceback (most recent call last):
  ...
TypeError: float_value must be an integer

>>> obj = BG()
>>> obj.integer_validator("complex_value", complex(1, 1))
Traceback (most recent call last):
  ...
TypeError: complex_value must be an integer

>>> obj = BG()
>>> obj.integer_validator("string_value", "hello")
Traceback (most recent call last):
  ...
TypeError: string_value must be an integer

>>> obj = BG()
>>> obj.integer_validator("tuple_value", (1, 2))
Traceback (most recent call last):
  ...
TypeError: tuple_value must be an integer

>>> obj = BG()
>>> obj.integer_validator("list_value", [1, 2, 3])
Traceback (most recent call last):
  ...
TypeError: list_value must be an integer

>>> obj = BG()
>>> obj.integer_validator("dict_value", {"key": "value"})
Traceback (most recent call last):
  ...
TypeError: dict_value must be an integer

>>> obj = BG()
>>> obj.integer_validator("set_value", {"hello", "world"})
Traceback (most recent call last):
  ...
TypeError: set_value must be an integer

>>> obj = BG()
>>> obj.integer_validator("frozenset_value", frozenset(["hello", "world"]))
Traceback (most recent call last):
  ...
TypeError: frozenset_value must be an integer

>>> obj = BG()
>>> obj.integer_validator("bytes_value", b"bytes")
Traceback (most recent call last):
  ...
TypeError: bytes_value must be an integer

>>> obj = BG()
>>> obj.integer_validator("bytearray_value", bytearray(b"bytes"))
Traceback (most recent call last):
  ...
TypeError: bytearray_value must be an integer

# Checking for no arguments to integer_validator:
>>> obj = BG()
>>> obj.integer_validator()
Traceback (most recent call last):
  ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

# Checking for only 1 argument to integer_validator:
>>> obj = BG()
>>> obj.integer_validator("single_arg")
Traceback (most recent call last):
  ...
TypeError: integer_validator() missing 1 required positional argument: 'value'

# Checking for too many arguments:
>>> obj = BG()
>>> obj.integer_validator("too_many_args", 1, 2)
Traceback (most recent call last):
  ...
TypeError: integer_validator() takes 3 positional arguments but 4 were given
