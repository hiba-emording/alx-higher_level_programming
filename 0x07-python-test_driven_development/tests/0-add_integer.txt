# File: tests/test_add_integer.txt

# MODULE: add_integer.py
# DESCRIPTION: This module contains a function to add two integers.

# FUNCTION: add_integer
# DESCRIPTION:
#   - Takes 2 Args or uses defaults '98' with one Arg.
#   - Performs addition of two integers or floats.
#   - Returns the sum as an integer.
#   - Raises a TypeError if 'a' or 'b' is not an int or float.

# USAGE:
#   - >>> add_integer = __import__('0-add_integer').add_integer
#   - >>> add_integer(a, b)
#     result

# Test Cases:

>>> add_integer = __import__('0-add_integer').add_integer

# Group 1 (Valid Cases):
# Case 1: Adding integers
>>> add_integer(5, 10)
15

>>> add_integer(-5, 10)
5

>>> add_integer(-5, -10)
-15

# Case 2: Adding floats
>>> add_integer(3.3, 7.7)
10

>>> add_integer(-3.3, 7.7)
4

>>> add_integer(-3.3, -7.7)
-10

# Case 3: Adding int and float
>>> add_integer(5.4, 10)
15

>>> add_integer(-5, -1.7)
-6

>>> add_integer(-5, 175.8)
170

>>> add_integer(-9.3, 1)
-8

# Case 4: Adding with default value
>>> add_integer(4)
102

>>> add_integer(1.1)
99

>>> add_integer(-4)
94

>>> add_integer(-8.3)
90

# Group 2 (Edge Cases): 
# Case 5: Valid type plus wrong type
>>> add_integer("try", 3)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(1.7, "maybe?")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer("try")
Traceback (most recent call last):
TypeError: a must be an integer

# Case 6: Adding both wrong types
>>> add_integer("try", "maybe")
Traceback (most recent call last):
TypeError: a must be an integer
